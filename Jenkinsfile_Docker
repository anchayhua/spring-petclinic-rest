pipeline {
    agent {
        docker {
            image 'maven:3.8.8-eclipse-temurin-17-alpine'
            // args '-v … -e …'   
        }   
    }
    stages {
        /*
        stage('Checkout SCM') {
            steps {
                git branch: 'master', url: 'https://github.com/anchayhua/spring-petclinic-rest.git'

                script {
                    env.GIT_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    println "Current Git Branch: ${env.GIT_BRANCH}"
                }
            }
        }
        */
        stage('Test') {
            steps {
                sh 'mvn clean test -B -ntp'
            }
            post {
                success {
                    junit '**/target/surefire-reports/*.xml'
                    jacoco(execPattern: 'target/jacoco.exec')
                }
            }
        }
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests -B -ntp'
            }
        }
        tage('SonarQube') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn sonar:sonar -B -ntp' 
                }
            }
        }
        /*
        stage("Quality Gate"){
            steps{
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                    
                }
            }
        }*/
        stage('Artifactory') {
            steps {
                script{

                    // MODE 1
                    
                    // sh 'env | sort'
                    // // env.MAVEN_HOME = 'usr/share/maven'

                    // def releases = 'spring-petclinic-rest-release'
                    // def snapshots = 'spring-petclinic-rest-snapshot'

                    // def server = Artifactory.server 'artifactory'
                    // def rtMaven = Artifactory.newMavenBuild()

                    // // Configura el deployer
                    // rtMaven.deployer server: server, releaseRepo: releases, snapshotRepo: snapshots

                    // // Construye el proyecto con Maven
                    // def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install -B -ntp -DskipTests'

                    // // Verifica si el archivo .jar fue generado correctamente
                    // sh 'ls -l target/'

                    // // Publica la información del build
                    // server.publishBuildInfo buildInfo

                    // MODE 2

                    def pom = readMavenPom file: 'pom.xml'
                    println pom

                    def targetRepo
                    def branchName = env.GIT_BRANCH.startsWith('origin/') ? env.GIT_BRANCH.replace('origin/', '') : env.GIT_BRANCH
                    println env.GIT_BRANCH
                    println branchName

                    if (branchName == 'master') {
                        targetRepo = 'spring-petclinic-rest-release'
                    } else if (branchName == 'develop' || branchName.startsWith('feature/') || branchName.startsWith('hotfix/') || branchName.startsWith('release/')) {
                        targetRepo = 'spring-petclinic-rest-snapshot'
                    }

                    def server = Artifactory.server 'artifactory'
                    def uploadSpec = """
                        {
                            "files": [
                                {
                                    "pattern": "target/.*.jar",
                                    "target": "${targetRepo}/${pom.groupId}/${pom.artifactId}/${pom.version}/",
                                    "regexp": "true",
                                    "props": "build.url=${RUN_DISPLAY_URL};build.user=${USER}"
                                }
                            ]
                        }
                    """

                    server.upload spec: uploadSpec
                }
            }
        }
        stage('Nexus') {
            steps {
                script{

                    def pom = readMavenPom file: 'pom.xml'
                    println pom

                    nexusPublisher nexusInstanceId: 'nexus',
                    nexusRepositoryId: 'spring-petclinic-rest-release',
                    packages: [[$class: 'MavenPackage',
                    mavenAssetList: [[classifier: '', extension: '', filePath: "target/${pom.artifactId}-${pom.version}.jar"]],
                    mavenCoordinate: [
                    groupId: "${pom.groupId}",
                    artifactId: "${pom.artifactId}",
                    packaging: 'jar',
                    version: "${pom.version}-${BUILD_NUMBER}"]]]

                }
            }
        }
        stage('Docker Hub') {
            steps {
                script{

                    def pom = readMavenPom file: 'pom.xml'

                    def app = docker.build("anchayhua/${pom.artifactId}:${pom.version}")
                    docker.withRegistry('https://registry.hub.docker.com/', 'jenkins-dockerhub') {
                        app.push()
                        app.push('latest')
                    }

                }
            }
        }
    }
    post {
        success {
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            cleanWs()
        }
    }
    
}