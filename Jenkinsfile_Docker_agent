pipeline {
    agent none
    stages {
        /*
        stage('Checkout SCM') {
            steps {
                git branch: 'master', url: 'https://github.com/anchayhua/spring-petclinic-rest.git'

                script {
                    env.GIT_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    println "Current Git Branch: ${env.GIT_BRANCH}"
                }
            }
        }
        */
        stage('Package') {
            agent {
                docker {
                    image 'maven:3.8.8-eclipse-temurin-17-alpine'
                    // args '-v … -e …'   
                }   
            }
            steps {
                sh 'mvn clean package -DskipTests -B -ntp'
            }
        }
        stage('Build Docker Image') {
            agent any
            options { skipDefaultCheckout() }
            steps {
                sh 'docker --version'
                script{

                    def pom = readMavenPom file: 'pom.xml'

                    // MODE 1: Usando docker build para misma plataforma del host

                    // sh 'docker build --help'
                    // sh 'docker build -t anchayhua/spring-petclinic-rest:3.2.1 .'
                    def app = docker.build("anchayhua/${pom.artifactId}:${pom.version}")
                    docker.withRegistry('https://registry.hub.docker.com/', 'jenkins-dockerhub') {
                        app.push()
                        app.push('latest')
                    }

                    // MODE 2: Usando docker buildx para multiplatforma

                    // sh 'docker buildx version'
                    // withCredentials([usernamePassword(credentialsId: 'jenkins-dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    //     sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    //     sh """
                    //         docker buildx build \
                    //             -t anchayhua/${pom.artifactId}:${pom.version} \
                    //             -t anchayhua/${pom.artifactId}:latest \
                    //             --platform linux/amd64,linux/arm64 --push .
                    //     """
                    // }
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
    
}